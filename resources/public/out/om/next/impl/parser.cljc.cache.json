["^ ","~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$om.next.impl.parser","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","^8","^8","~$util","~$om.util","^:","^:"],"~:uses",null,"~:defs",["^ ","~$expr->ast",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/hlolli-work/Documents/sandbox/om-next-template/resources/public/out/om/next/impl/parser.cljc","~:line",113,"~:column",7,"~:end-line",113,"~:end-column",16,"~:arglists",["~#list",["~$quote",["^F",[["~$x"]]]]],"~:doc","Given a query expression convert it into an AST."],"^3","~$om.next.impl.parser/expr->ast","~:variadic",false,"^@","resources/public/out/om/next/impl/parser.cljc","^D",16,"~:method-params",["^F",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^F",[null,null]],"^B",1,"^A",113,"^C",113,"~:max-fixed-arity",1,"~:fn-var",true,"^E",["^F",["^G",["^F",[["~$x"]]]]],"^H","Given a query expression convert it into an AST."],"~$call->ast",["^ ","^>",null,"^?",["^ ","^@","/home/hlolli-work/Documents/sandbox/om-next-template/resources/public/out/om/next/impl/parser.cljc","^A",72,"^B",7,"^C",72,"^D",16,"^E",["^F",["^G",["^F",[[["~$f","~$args","~:as","~$call"]]]]]]],"^3","~$om.next.impl.parser/call->ast","^J",false,"^@","resources/public/out/om/next/impl/parser.cljc","^D",16,"^K",["^F",[["~$p__35249"]]],"^L",null,"^M",["^F",[null,null]],"^B",1,"^A",72,"^C",72,"^N",1,"^O",true,"^E",["^F",["^G",["^F",[[["~$f","^Q","^R","^S"]]]]]]],"~$ast->expr",["^ ","^>",null,"^?",["^ ","^@","/home/hlolli-work/Documents/sandbox/om-next-template/resources/public/out/om/next/impl/parser.cljc","^A",133,"^B",7,"^C",133,"^D",16,"^E",["^F",["^G",["^F",[["~$ast"],[["^ ","~:keys",["~$type","~$component"],"^R","^W"],"~$unparse?"]]]]],"^H","Given a query expression AST convert it back into a query expression.","~:top-fn",["^ ","^J",false,"^N",2,"^K",["^F",[["^W"],[["^ ","^X",["^Y","^Z"],"^R","^W"],"^["]]],"^E",["^F",[["^W"],[["^ ","^X",["^Y","^Z"],"^R","^W"],"^["]]],"^M",["^F",[null,null]]]],"^3","~$om.next.impl.parser/ast->expr","^J",false,"^@","resources/public/out/om/next/impl/parser.cljc","^D",16,"^10",["^ ","^J",false,"^N",2,"^K",["^F",[["^W"],[["^ ","^X",["^Y","^Z"],"^R","^W"],"^["]]],"^E",["^F",[["^W"],[["^ ","^X",["^Y","^Z"],"^R","^W"],"^["]]],"^M",["^F",[null,null]]],"^K",["^F",[["^W"],[["^ ","^X",["^Y","^Z"],"^R","^W"],"^["]]],"^L",null,"^M",["^F",[null,null]],"^B",1,"^A",133,"^C",133,"^N",2,"^O",true,"^E",["^F",[["^W"],[["^ ","^X",["^Y","^Z"],"^R","^W"],"^["]]],"^H","Given a query expression AST convert it back into a query expression."],"~$rethrow?",["^ ","^>",null,"^?",["^ ","^@","/home/hlolli-work/Documents/sandbox/om-next-template/resources/public/out/om/next/impl/parser.cljc","^A",235,"^B",7,"^C",235,"^D",15,"^E",["^F",["^G",["^F",[["~$x"]]]]]],"^3","~$om.next.impl.parser/rethrow?","^J",false,"^@","resources/public/out/om/next/impl/parser.cljc","^D",15,"^K",["^F",[["~$x"]]],"^L",null,"^M",["^F",[null,null]],"^B",1,"^A",235,"^C",235,"^N",1,"^O",true,"^E",["^F",["^G",["^F",[["~$x"]]]]]],"~$path-meta",["^ ","^>",null,"^?",["^ ","^@","/home/hlolli-work/Documents/sandbox/om-next-template/resources/public/out/om/next/impl/parser.cljc","^A",165,"^B",7,"^C",165,"^D",16,"^E",["^F",["^G",["^F",[["~$data","~$path","~$query"],["^15","^16","^17","~$union-expr"]]]]],"^H","Add path metadata to a data structure. data is the data to be worked on.\n   path is the current path into the data. query is the query used to\n   walk the data. union-expr tracks the last seen union query to be used\n   when it finds a recursive union.","^10",["^ ","^J",false,"^N",4,"^K",["^F",[["^15","^16","^17"],["^15","^16","^17","^18"]]],"^E",["^F",[["^15","^16","^17"],["^15","^16","^17","^18"]]],"^M",["^F",[null,null]]]],"^3","~$om.next.impl.parser/path-meta","^J",false,"^@","resources/public/out/om/next/impl/parser.cljc","^D",16,"^10",["^ ","^J",false,"^N",4,"^K",["^F",[["^15","^16","^17"],["^15","^16","^17","^18"]]],"^E",["^F",[["^15","^16","^17"],["^15","^16","^17","^18"]]],"^M",["^F",[null,null]]],"^K",["^F",[["^15","^16","^17"],["^15","^16","^17","^18"]]],"^L",null,"^M",["^F",[null,null]],"^B",1,"^A",165,"^C",165,"^N",4,"^O",true,"^E",["^F",[["^15","^16","^17"],["^15","^16","^17","^18"]]],"^H","Add path metadata to a data structure. data is the data to be worked on.\n   path is the current path into the data. query is the query used to\n   walk the data. union-expr tracks the last seen union query to be used\n   when it finds a recursive union."],"~$wrap-expr",["^ ","^>",null,"^?",["^ ","^@","/home/hlolli-work/Documents/sandbox/om-next-template/resources/public/out/om/next/impl/parser.cljc","^A",126,"^B",7,"^C",126,"^D",16,"^E",["^F",["^G",["^F",[["~$root?","~$expr"]]]]]],"^3","~$om.next.impl.parser/wrap-expr","^J",false,"^@","resources/public/out/om/next/impl/parser.cljc","^D",16,"^K",["^F",[["^1;","^1<"]]],"^L",null,"^M",["^F",[null,null]],"^B",1,"^A",126,"^C",126,"^N",2,"^O",true,"^E",["^F",["^G",["^F",[["^1;","^1<"]]]]]],"~$join->ast",["^ ","^>",null,"^?",["^ ","^@","/home/hlolli-work/Documents/sandbox/om-next-template/resources/public/out/om/next/impl/parser.cljc","^A",89,"^B",7,"^C",89,"^D",16,"^E",["^F",["^G",["^F",[["~$join"]]]]]],"^3","~$om.next.impl.parser/join->ast","^J",false,"^@","resources/public/out/om/next/impl/parser.cljc","^D",16,"^K",["^F",[["^1?"]]],"^L",null,"^M",["^F",[null,null]],"^B",1,"^A",89,"^C",89,"^N",1,"^O",true,"^E",["^F",["^G",["^F",[["^1?"]]]]]],"~$keyword->ast",["^ ","^>",null,"^?",["^ ","^@","/home/hlolli-work/Documents/sandbox/om-next-template/resources/public/out/om/next/impl/parser.cljc","^A",52,"^B",7,"^C",52,"^D",19,"^E",["^F",["^G",["^F",[["~$k"]]]]]],"^3","~$om.next.impl.parser/keyword->ast","^J",false,"^@","resources/public/out/om/next/impl/parser.cljc","^D",19,"^K",["^F",[["~$k"]]],"^L",null,"^M",["^F",[null,null]],"^B",1,"^A",52,"^C",52,"^N",1,"^O",true,"^E",["^F",["^G",["^F",[["~$k"]]]]]],"~$query->ast",["^ ","^>",null,"^?",["^ ","^@","/home/hlolli-work/Documents/sandbox/om-next-template/resources/public/out/om/next/impl/parser.cljc","^A",79,"^B",7,"^C",79,"^D",17,"^E",["^F",["^G",["^F",[["^17"]]]]],"^H","Convert a query to its AST representation."],"^3","~$om.next.impl.parser/query->ast","^J",false,"^@","resources/public/out/om/next/impl/parser.cljc","^D",17,"^K",["^F",[["^17"]]],"^L",null,"^M",["^F",[null,null]],"^B",1,"^A",79,"^C",79,"^N",1,"^O",true,"^E",["^F",["^G",["^F",[["^17"]]]]],"^H","Convert a query to its AST representation."],"~$ident->ast",["^ ","^>",null,"^?",["^ ","^@","/home/hlolli-work/Documents/sandbox/om-next-template/resources/public/out/om/next/impl/parser.cljc","^A",108,"^B",7,"^C",108,"^D",17,"^E",["^F",["^G",["^F",[[["~$k","~$id","^R","~$ref"]]]]]]],"^3","~$om.next.impl.parser/ident->ast","^J",false,"^@","resources/public/out/om/next/impl/parser.cljc","^D",17,"^K",["^F",[["~$p__35264"]]],"^L",null,"^M",["^F",[null,null]],"^B",1,"^A",108,"^C",108,"^N",1,"^O",true,"^E",["^F",["^G",["^F",[[["~$k","^1F","^R","^1G"]]]]]]],"~$dispatch",["^ ","^>",null,"^?",["^ ","^@","/home/hlolli-work/Documents/sandbox/om-next-template/resources/public/out/om/next/impl/parser.cljc","^A",294,"^B",7,"^C",294,"^D",15,"^E",["^F",["^G",["^F",[["~$_","~$k","~$_"]]]]]],"^3","~$om.next.impl.parser/dispatch","^J",false,"^@","resources/public/out/om/next/impl/parser.cljc","^D",15,"^K",["^F",[["~$_","~$k","~$_"]]],"^L",null,"^M",["^F",[null,null]],"^B",1,"^A",294,"^C",294,"^N",3,"^O",true,"^E",["^F",["^G",["^F",[["~$_","~$k","~$_"]]]]]],"~$union-entry->ast",["^ ","^>",null,"^?",["^ ","^@","/home/hlolli-work/Documents/sandbox/om-next-template/resources/public/out/om/next/impl/parser.cljc","^A",57,"^B",7,"^C",57,"^D",23,"^E",["^F",["^G",["^F",[[["~$k","~$v"]]]]]]],"^3","~$om.next.impl.parser/union-entry->ast","^J",false,"^@","resources/public/out/om/next/impl/parser.cljc","^D",23,"^K",["^F",[["~$p__35242"]]],"^L",null,"^M",["^F",[null,null]],"^B",1,"^A",57,"^C",57,"^N",1,"^O",true,"^E",["^F",["^G",["^F",[[["~$k","~$v"]]]]]]],"~$parser",["^ ","^>",null,"^?",["^ ","^@","/home/hlolli-work/Documents/sandbox/om-next-template/resources/public/out/om/next/impl/parser.cljc","^A",239,"^B",7,"^C",239,"^D",13,"^E",["^F",["^G",["^F",[[["^ ","^X",["~$read","~$mutate"],"^R","~$config"]]]]]],"^H","Given a :read and/or :mutate function return a parser. Refer to om.next/parser\n   for top level documentation."],"^3","~$om.next.impl.parser/parser","^J",false,"^@","resources/public/out/om/next/impl/parser.cljc","^D",13,"^K",["^F",[["~$p__35319"]]],"^L",null,"^M",["^F",[null,null]],"^B",1,"^A",239,"^C",239,"^N",1,"^O",true,"^E",["^F",["^G",["^F",[[["^ ","^X",["^1P","^1Q"],"^R","^1R"]]]]]],"^H","Given a :read and/or :mutate function return a parser. Refer to om.next/parser\n   for top level documentation."],"~$symbol->ast",["^ ","^>",null,"^?",["^ ","^@","/home/hlolli-work/Documents/sandbox/om-next-template/resources/public/out/om/next/impl/parser.cljc","^A",48,"^B",7,"^C",48,"^D",18,"^E",["^F",["^G",["^F",[["~$k"]]]]]],"^3","~$om.next.impl.parser/symbol->ast","^J",false,"^@","resources/public/out/om/next/impl/parser.cljc","^D",18,"^K",["^F",[["~$k"]]],"^L",null,"^M",["^F",[null,null]],"^B",1,"^A",48,"^C",48,"^N",1,"^O",true,"^E",["^F",["^G",["^F",[["~$k"]]]]]],"~$union->ast",["^ ","^>",null,"^?",["^ ","^@","/home/hlolli-work/Documents/sandbox/om-next-template/resources/public/out/om/next/impl/parser.cljc","^A",67,"^B",7,"^C",67,"^D",17,"^E",["^F",["^G",["^F",[["~$m"]]]]]],"^3","~$om.next.impl.parser/union->ast","^J",false,"^@","resources/public/out/om/next/impl/parser.cljc","^D",17,"^K",["^F",[["~$m"]]],"^L",null,"^M",["^F",[null,null]],"^B",1,"^A",67,"^C",67,"^N",1,"^O",true,"^E",["^F",["^G",["^F",[["~$m"]]]]]]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^2",["~:query-root","~:path","~:remote","~:children","~:union-key","~:read","~:key","~:union-entry","~:else","~:call","~$*","~:value","~:params","~:ast","~:type","~:component","~:error/invalid-join","~:error/invalid-expression","~:om.next/abort","~:parser","~:root","~:result","~:prop","~:dispatch-key","~:om-path","~:action","~:target","^G","~:query","~:om.next/error","~:union","~$...","~:mutate","~:om.next/root","~:join","~:elide-paths"]],"~:order",["^2F","^26","^2=","^2E","^2>","^24","^2J","^23","^27","^2L","^G","^2I","^22","^2;","^29","^2C","^20","^2P","^2M","^28","^2?","^2@","^2G","~$*","^2A","^25","^2N","^2Q","^2B","^2O","^21","^2<","^2:","^2H","^2D","^2K"]],"^H","\n   Generic query expression parsing and AST manipulation.\n\n   QUERY EXPRESSIONS\n\n   Query expressions are a variation on Datomic Pull Syntax\n   http://docs.datomic.com/pull.html more suitable for generic client/server\n   state transfer. It's important to note the Om Next query expression syntax is\n   *not* a strict superset of Datomic Pull.\n\n   A query expression is composed of EDN values. The grammar for query\n   expressions follows:\n\n   QueryRoot    := EdnVector(QueryExpr*)\n   QueryExpr    := (EdnKeyword | IdentExpr | ParamExpr | JoinExpr)\n   IdentExpr    := EdnVector2(Keyword, EdnValue)\n   ParamExpr    := EdnList2(QueryExpr | EdnSymbol, ParamMapExpr)\n   ParamMapExpr := EdnMap(Keyword, EdnValue)\n   JoinExpr     := EdnMap((Keyword | IdentExpr), (QueryRoot | UnionExpr | RecurExpr))\n   UnionExpr    := EdnMap(Keyword, QueryRoot)\n   RecurExpr    := ('... | Integer)\n\n   Note most apis in Om Next expect a QueryRoot not a QueryExpr.\n\n   QUERY EXPRESSION AST FORMAT\n\n   Given a QueryExpr you can get the AST via om.next.impl.parser/expr->ast.\n   The following keys can appear in the AST representation:\n\n   {:type         (:prop | :join | :call | :root | :union | :union-entry)\n    :key          (EdnKeyword | EdnSymbol | IdentExpr)\n    :dispatch-key (EdnKeyword | EdnSymbol)\n    :union-key    EdnKeyword\n    :query        (QueryRoot | RecurExpr)\n    :params       ParamMapExpr\n    :children     EdnVector(AST)\n    :component    Object}\n\n   :query and :params may or may not appear. :type :call is only for\n   mutations."]